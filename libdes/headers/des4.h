#include <array>
#include <functional>
#include <utility>
#include <vector>

namespace des4
{
    namespace _internal
    {
        typedef std::array<uint8_t, 16> S_BOX;

        const std::array<S_BOX, 2> S_BOXES
        {{
            {{0b101, 0b010, 0b001, 0b110, 0b011, 0b100, 0b111, 0b000, 
              0b001, 0b100, 0b110, 0b010, 0b000, 0b111, 0b101, 0b011}},

            {{0b100, 0b000, 0b110, 0b101, 0b111, 0b001, 0b011, 0b010,
              0b101, 0b011, 0b000, 0b111, 0b110, 0b010, 0b001, 0b100}}
        }};

        /*
        int main()
        {
            //Build lookup table for xor combinations
            array<vector<pair<uint8_t, uint8_t>>, 16> xor_lookup;
            for(uint8_t i = 0; i < 16; i++)
                for(uint8_t j = 0; j < 16; j++)
                    xor_lookup[i^j].emplace_back(i, j);
        
            cout << "array<vector<pair<uint8_t, uint8_t>>, 16> xor_lookup" << endl;
            cout << "{{" << endl;
            for(int i=0; i<16; i++)
            {
                cout << "\t{{";
                for(int j=0; j < xor_lookup[i].size(); j++)
                {
                    cout << "{" << (int)xor_lookup[i][j].first << ", " << (int)xor_lookup[i][j].second << "}";
                    if(j < xor_lookup[i].size() - 1) cout << ", ";
                }
                cout << "}}";
                if(i < 15) cout << ",";
                cout << endl;
            }
            cout << "}};";
        }
        */
        const std::array<std::vector<std::pair<uint8_t, uint8_t>>, 16> XOR_LOOKUP
        {{
                {{{0, 0}, {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}, {10, 10}, {11, 11}, {12, 12}, {13, 13}, {14, 14}, {15, 15}}},
                {{{0, 1}, {1, 0}, {2, 3}, {3, 2}, {4, 5}, {5, 4}, {6, 7}, {7, 6}, {8, 9}, {9, 8}, {10, 11}, {11, 10}, {12, 13}, {13, 12}, {14, 15}, {15, 14}}},
                {{{0, 2}, {1, 3}, {2, 0}, {3, 1}, {4, 6}, {5, 7}, {6, 4}, {7, 5}, {8, 10}, {9, 11}, {10, 8}, {11, 9}, {12, 14}, {13, 15}, {14, 12}, {15, 13}}},
                {{{0, 3}, {1, 2}, {2, 1}, {3, 0}, {4, 7}, {5, 6}, {6, 5}, {7, 4}, {8, 11}, {9, 10}, {10, 9}, {11, 8}, {12, 15}, {13, 14}, {14, 13}, {15, 12}}},
                {{{0, 4}, {1, 5}, {2, 6}, {3, 7}, {4, 0}, {5, 1}, {6, 2}, {7, 3}, {8, 12}, {9, 13}, {10, 14}, {11, 15}, {12, 8}, {13, 9}, {14, 10}, {15, 11}}},
                {{{0, 5}, {1, 4}, {2, 7}, {3, 6}, {4, 1}, {5, 0}, {6, 3}, {7, 2}, {8, 13}, {9, 12}, {10, 15}, {11, 14}, {12, 9}, {13, 8}, {14, 11}, {15, 10}}},
                {{{0, 6}, {1, 7}, {2, 4}, {3, 5}, {4, 2}, {5, 3}, {6, 0}, {7, 1}, {8, 14}, {9, 15}, {10, 12}, {11, 13}, {12, 10}, {13, 11}, {14, 8}, {15, 9}}},
                {{{0, 7}, {1, 6}, {2, 5}, {3, 4}, {4, 3}, {5, 2}, {6, 1}, {7, 0}, {8, 15}, {9, 14}, {10, 13}, {11, 12}, {12, 11}, {13, 10}, {14, 9}, {15, 8}}},
                {{{0, 8}, {1, 9}, {2, 10}, {3, 11}, {4, 12}, {5, 13}, {6, 14}, {7, 15}, {8, 0}, {9, 1}, {10, 2}, {11, 3}, {12, 4}, {13, 5}, {14, 6}, {15, 7}}},
                {{{0, 9}, {1, 8}, {2, 11}, {3, 10}, {4, 13}, {5, 12}, {6, 15}, {7, 14}, {8, 1}, {9, 0}, {10, 3}, {11, 2}, {12, 5}, {13, 4}, {14, 7}, {15, 6}}},
                {{{0, 10}, {1, 11}, {2, 8}, {3, 9}, {4, 14}, {5, 15}, {6, 12}, {7, 13}, {8, 2}, {9, 3}, {10, 0}, {11, 1}, {12, 6}, {13, 7}, {14, 4}, {15, 5}}},
                {{{0, 11}, {1, 10}, {2, 9}, {3, 8}, {4, 15}, {5, 14}, {6, 13}, {7, 12}, {8, 3}, {9, 2}, {10, 1}, {11, 0}, {12, 7}, {13, 6}, {14, 5}, {15, 4}}},
                {{{0, 12}, {1, 13}, {2, 14}, {3, 15}, {4, 8}, {5, 9}, {6, 10}, {7, 11}, {8, 4}, {9, 5}, {10, 6}, {11, 7}, {12, 0}, {13, 1}, {14, 2}, {15, 3}}},
                {{{0, 13}, {1, 12}, {2, 15}, {3, 14}, {4, 9}, {5, 8}, {6, 11}, {7, 10}, {8, 5}, {9, 4}, {10, 7}, {11, 6}, {12, 1}, {13, 0}, {14, 3}, {15, 2}}},
                {{{0, 14}, {1, 15}, {2, 12}, {3, 13}, {4, 10}, {5, 11}, {6, 8}, {7, 9}, {8, 6}, {9, 7}, {10, 4}, {11, 5}, {12, 2}, {13, 3}, {14, 0}, {15, 1}}},
                {{{0, 15}, {1, 14}, {2, 13}, {3, 12}, {4, 11}, {5, 10}, {6, 9}, {7, 8}, {8, 7}, {9, 6}, {10, 5}, {11, 4}, {12, 3}, {13, 2}, {14, 1}, {15, 0}}}
        }};

        uint8_t expand(const uint8_t& n);
        uint8_t next_key(uint16_t& key);
        uint8_t prev_key(uint16_t& key);        
        uint8_t F(uint8_t r, const uint8_t& key);
        uint16_t round(const uint16_t& block, const uint8_t& key);
    }

    uint16_t encrypt(uint16_t block, uint16_t key, const uint64_t& rounds=4);
    uint16_t decrypt(uint16_t block, uint16_t key, const uint64_t& rounds=4);

    uint16_t crack3(std::function<uint16_t(uint16_t)> des3);
    uint16_t crack4(std::function<uint16_t(uint16_t)> des4, uint64_t iterations=250);    
}