/*! @file */ 
#include "../../catch.hpp"

#include "des64.h"

#include <cmath>
#include <utility>
#include <functional>

using namespace std;
using namespace des64;
using namespace _internal;

//Cases from http://page.math.tu-berlin.de/~kant/teaching/hess/krypto-ws2006/des.htm
TEST_CASE("DES64 Internals")
{
    SECTION("Parity Check")
    {
        REQUIRE(!parity_check(0b0000000000000000000000000000000000000000000000000000000000000000));
        REQUIRE(!parity_check(0b0000000000000000000000000000000000000000000000000000000000000001));
        REQUIRE(!parity_check(0b0000000000000000000000000000000000000000000000000000000100000001));
        REQUIRE(!parity_check(0b0000000000000000000000000000000000000000000000010000000100000001));
        REQUIRE(!parity_check(0b0000000000000000000000000000000000000001000000010000000100000001));
        REQUIRE(!parity_check(0b0000000000000000000000000000000100000001000000010000000100000001));
        REQUIRE(!parity_check(0b0000000000000000000000010000000100000001000000010000000100000001));
        REQUIRE(!parity_check(0b0000000000000001000000010000000100000001000000010000000100000001));
        REQUIRE(parity_check(0b0000000100000001000000010000000100000001000000010000000100000001));
        REQUIRE(parity_check(0b0011000100010000011110010000111001000000011000010111111111111110));
    }

    SECTION("Keys")
    {
        array<uint64_t, 16> keys = make_keys(0b0001001100110100010101110111100110011011101111001101111111110001);

        REQUIRE(keys[0] == 0b000110110000001011101111111111000111000001110010);
        REQUIRE(keys[1] == 0b011110011010111011011001110110111100100111100101);
        REQUIRE(keys[2] == 0b010101011111110010001010010000101100111110011001);
        REQUIRE(keys[3] == 0b011100101010110111010110110110110011010100011101);
        REQUIRE(keys[4] == 0b011111001110110000000111111010110101001110101000);
        REQUIRE(keys[5] == 0b011000111010010100111110010100000111101100101111);
        REQUIRE(keys[6] == 0b111011001000010010110111111101100001100010111100);
        REQUIRE(keys[7] == 0b111101111000101000111010110000010011101111111011);
        REQUIRE(keys[8] == 0b111000001101101111101011111011011110011110000001);
        REQUIRE(keys[9] == 0b101100011111001101000111101110100100011001001111);
        REQUIRE(keys[10] == 0b001000010101111111010011110111101101001110000110);
        REQUIRE(keys[11] == 0b011101010111000111110101100101000110011111101001);
        REQUIRE(keys[12] == 0b100101111100010111010001111110101011101001000001);
        REQUIRE(keys[13] == 0b010111110100001110110111111100101110011100111010);
        REQUIRE(keys[14] == 0b101111111001000110001101001111010011111100001010);
        REQUIRE(keys[15] == 0b110010110011110110001011000011100001011111110101);
    }

    SECTION("Initial Permute")
    {
        REQUIRE(permute<64, 64>(0b0000000100100011010001010110011110001001101010111100110111101111, IP) == 
                0b1100110000000000110011001111111111110000101010101111000010101010);
    }

    SECTION("Expand")
    {
        REQUIRE(permute<32, 48>(0b11110000101010101111000010101010, EXPAND) == 
                0b011110100001010101010101011110100001010101010101);
    }

    SECTION("F")
    {
        REQUIRE(F(0b11110000101010101111000010101010,
                  0b000110110000001011101111111111000111000001110010) == 
                  0b00100011010010101010100110111011);
    };

    SECTION("Round")
    {
        REQUIRE(round(0b1100110000000000110011001111111111110000101010101111000010101010, 
                      0b000110110000001011101111111111000111000001110010) == 
                      0b1111000010101010111100001010101011101111010010100110010101000100);
    }

    SECTION("Inverse Permute")
    {
        REQUIRE(permute<64, 64>(0b0000101001001100110110011001010101000011010000100011001000110100, IP_INV) == 
                0b1000010111101000000100110101010000001111000010101011010000000101);
    }
};

TEST_CASE("DES64 Encrypt")
{ 
    SECTION("Given test case")
    {
        REQUIRE(encrypt(0x0123456789ABCDEF, 0x133457799BBCDFF1) == 0x85E813540F0AB405);
    }
}

TEST_CASE("DES64 Decrypt")
{
    SECTION("Given test case")
    {
        REQUIRE(decrypt(0x85E813540F0AB405, 0x133457799BBCDFF1) == 0x0123456789ABCDEF);  
    }
}