/*! @file */ 
#include "../../catch.hpp"

#include "bbs.h"

#ifdef CRYPTOMATH_GMP
#include <gmpxx.h>
#endif

using namespace std;
using namespace bbs;

TEST_CASE("bbs constructor errors")
{
    SECTION("p, q prime")
    {
        REQUIRE_THROWS(blum_blum_shub_engine<uint8_t>(10, 7));
        REQUIRE_THROWS(blum_blum_shub_engine<uint8_t>(7, 10));
    }

    SECTION("p, q = 3 (mod 4)")
    {
        REQUIRE_THROWS(blum_blum_shub_engine<uint8_t>(5, 19));
        REQUIRE_THROWS(blum_blum_shub_engine<uint8_t>(19, 5));
    }

    SECTION("Result Bits Security")
    {
        REQUIRE_NOTHROW((blum_blum_shub_engine<uint16_t, uint64_t, 2>(7, 19)));        
        REQUIRE_THROWS((blum_blum_shub_engine<uint16_t, uint64_t, 3>(7, 19)));
    }

    SECTION("x relatively prime to p, q")
    {
        REQUIRE_THROWS(blum_blum_shub_engine<uint8_t>(7, 19, 14));
    }

#ifdef CRYPTOMATH_GMP
    SECTION("GMP Integration")
    {
        mpz_class LARGE1("11011000110000011000000011000000000110000000000011000000000000011000000000000000110000000000000000011000000000000000000011000000000000000000000110000000000000000000000011000000000000000000000000011000000000000000000000000000110000000000000000000000000000011000000000000000000000000000000011000000000000000000000000000000000110000000000000000020000000000000000011000000000000000002020000000000000000011000000000000000002080200000000000000000110000000000000000020848020000000000000000011000000000000000002084648020000000000000000011000000000000000002084802000000000000000001100000000000000000208020000000000000000011000000000000000002020000000000000000011000000000000000002000000000000000001100000000000000000000000000000000011000000000000000000000000000000011000000000000000000000000000001100000000000000000000000000011000000000000000000000000011000000000000000000000001100000000000000000000011000000000000000000011000000000000000001100000000000000011000000000000011000000000001100000000011000000011000001100011011");
        mpz_class LARGE2("1111111111111111111100000000000000000011000000000000000000011000000000000000000001100000000000000000000011000000000000000000000011000000000000000000000001100000000000000000000000011000000000000000000000000011000000000000000000000000001100000000000000000000000000011000000000000000000000000000011000000000000000000000000000001100000000000000000000000000000011000000000000000000000000000000011000000000000000000000000000000001100000000000000000000000000000000011000000000000000088000000000000000011000000000000000087800000000000000001100000000000000008800000000000000001100000000000000000000000000000000011000000000000000000000000000000001100000000000000000000000000000001100000000000000000000000000000011000000000000000000000000000001100000000000000000000000000001100000000000000000000000000011000000000000000000000000001100000000000000000000000001100000000000000000000000011000000000000000000000001100000000000000000000001100000000000000000000011000000000000000000001100000000000000000001100000000000000000011111111111111111111");

        REQUIRE_NOTHROW((blum_blum_shub_engine<uint8_t, mpz_class, 8>(LARGE1, LARGE2)));
        REQUIRE_THROWS((blum_blum_shub_engine<uint16_t, mpz_class, 16>(LARGE1, LARGE2)));
    }
#endif
}